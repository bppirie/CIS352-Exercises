#lang racket
(provide    mk-point
      point?
      point-dist
      binary-tree?
      sorted-tree?
      balanced-tree?)

; Now we assume a point is in format of '(point x y), where x and y are integers. For example, '(point 1 3) is a point at x=3, y=4

; Now we need a constructor for the point, which takes into two integers and returns a point
(define (mk-point x y)
  'todo)

; Now, how can we know whether a object is a point? We need a function point? takes in a parameter, checks
; 1. first element in this list is 'point
; 2. Second element in this list is number
; 3. Third element in this list is number
; 4. This list only contains these 3 elements
(define (point? x)
  'todo)

; Remember that point-distance in e0? Now we want to apply that to points!
; Write a function point-dist which takes in 2 points, return the distance between these 2 points
(define (point-dist p1 p2)
  'todo)

; In the video we see how binary tree looks like, please complete the binary-tree?, which checks whether t is a binary tree
(define (binary-tree? t)
  'todo)

; A sorted tree is a tree that, any node is greater than the left side, but less than the right side
; Write a function sorted-tree, checks whether a binary tree is sorted
(define (sorted-tree? t)
  'todo)

; A balanced tree is a binary tree that, keep its height at minimal. 
; In other words, the longest path to any leaf and the shortest path to any leaf is equal or less than 1
; Write a function is-balanced-tree?, checks whether a binary tree is balanced

(define (balanced-tree? t)
  'todo)
  